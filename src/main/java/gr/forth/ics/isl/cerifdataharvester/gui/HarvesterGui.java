/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gr.forth.ics.isl.cerifdataharvester.gui;

import gr.forth.ics.isl.common.Common;
import gr.forth.ics.isl.common.EktResources;
import gr.forth.ics.isl.common.FrisResources;
import gr.forth.ics.isl.common.RcukResources;
import gr.forth.ics.isl.exception.GenericException;
import org.apache.log4j.Logger;

/**
 * @author Yannis Marketakis (marketak 'at' ics 'dot' forth 'dot' gr)
 */
public class HarvesterGui extends javax.swing.JFrame {
    public static StringBuilder htmlOutput=new StringBuilder();
    public static final Logger logger=Logger.getLogger(HarvesterGui.class);

    /**
     * Creates new form HarvesterGui
     */
    public HarvesterGui() {
        initComponents();
        versionLabel.setText("Version: "+Common.RELEASE_VERSION);
        workingLabel.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dataSourceLabel = new javax.swing.JLabel();
        urlLabel = new javax.swing.JLabel();
        dataSourceComboBox = new javax.swing.JComboBox<>();
        urlTextField = new javax.swing.JTextField();
        personsCheckBox = new javax.swing.JCheckBox();
        projectsCheckBox = new javax.swing.JCheckBox();
        publicationsCheckBox = new javax.swing.JCheckBox();
        organizationsCheckBox = new javax.swing.JCheckBox();
        eAddressCheckBox = new javax.swing.JCheckBox();
        pAddressCheckBox = new javax.swing.JCheckBox();
        fundingsCheckBox = new javax.swing.JCheckBox();
        logoLabel = new javax.swing.JLabel();
        titleLabel = new javax.swing.JLabel();
        harvestButton = new javax.swing.JButton();
        resultsScrollPane = new javax.swing.JScrollPane();
        resutlsLabel = new javax.swing.JLabel();
        versionLabel = new javax.swing.JLabel();
        workingLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("CERIF Data Harvester");

        dataSourceLabel.setText("Data Source");

        urlLabel.setText("URL");

        dataSourceComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "EKT", "FRIS", "RCUK", "OTHER" }));
        dataSourceComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dataSourceComboBoxActionPerformed(evt);
            }
        });

        urlTextField.setText("http://cc-refim.ekt.gr/cerif-rest-refim/");

        personsCheckBox.setText("Persons");

        projectsCheckBox.setText("Projects");

        publicationsCheckBox.setText("Publications");

        organizationsCheckBox.setText("Organizations");
        organizationsCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                organizationsCheckBoxActionPerformed(evt);
            }
        });

        eAddressCheckBox.setText("e-addresses");
        eAddressCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eAddressCheckBoxActionPerformed(evt);
            }
        });

        pAddressCheckBox.setText("p-addresses");

        fundingsCheckBox.setText("Fundings");

        logoLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        logoLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/logo-vre4eic-modern_450.jpg"))); // NOI18N

        titleLabel.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        titleLabel.setText("CERIF Data Harvester");

        harvestButton.setText("Harvest");
        harvestButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                harvestButtonActionPerformed(evt);
            }
        });

        resultsScrollPane.setBackground(new java.awt.Color(255, 255, 255));

        resutlsLabel.setBackground(javax.swing.UIManager.getDefaults().getColor("Button.disabledShadow"));
        resutlsLabel.setText("Ready to start...");
        resutlsLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        resultsScrollPane.setViewportView(resutlsLabel);

        versionLabel.setFont(new java.awt.Font("Tahoma", 2, 10)); // NOI18N
        versionLabel.setText("version x");

        workingLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/working2_50.gif"))); // NOI18N
        workingLabel.setText("          ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(dataSourceLabel)
                            .addComponent(urlLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(urlTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(dataSourceComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(logoLabel))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addComponent(titleLabel)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(versionLabel)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(personsCheckBox)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(projectsCheckBox)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(publicationsCheckBox)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(organizationsCheckBox))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(eAddressCheckBox)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(pAddressCheckBox)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(fundingsCheckBox))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(harvestButton)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(workingLabel))
                        .addComponent(resultsScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 481, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(logoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(titleLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dataSourceLabel)
                    .addComponent(dataSourceComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(urlLabel)
                    .addComponent(urlTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(personsCheckBox)
                    .addComponent(projectsCheckBox)
                    .addComponent(publicationsCheckBox)
                    .addComponent(organizationsCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(eAddressCheckBox)
                    .addComponent(pAddressCheckBox)
                    .addComponent(fundingsCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(harvestButton)
                    .addComponent(workingLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(resultsScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(versionLabel))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void dataSourceComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dataSourceComboBoxActionPerformed
        switch(this.dataSourceComboBox.getSelectedItem().toString()){
            case EktResources.EKT:
                urlTextField.setText(EktResources.EKT_ENDPOINT_URL);
                break;
            case RcukResources.RCUK:
                urlTextField.setText(RcukResources.RCUK_ENDPOINT_URL);
                break;
            case FrisResources.FRIS:
                urlTextField.setText(FrisResources.FRIS_ENDPOINT_URL);
                break;
            case "OTHER":
            default:
                urlTextField.setText("http://");
        }
    }//GEN-LAST:event_dataSourceComboBoxActionPerformed

    private void organizationsCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_organizationsCheckBoxActionPerformed
    }//GEN-LAST:event_organizationsCheckBoxActionPerformed

    private void eAddressCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eAddressCheckBoxActionPerformed
    }//GEN-LAST:event_eAddressCheckBoxActionPerformed

    private void harvestButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_harvestButtonActionPerformed
        if(!projectsCheckBox.isSelected() && !personsCheckBox.isSelected() && 
                !publicationsCheckBox.isSelected() && !organizationsCheckBox.isSelected() &&
                !eAddressCheckBox.isSelected() && ! pAddressCheckBox.isSelected() && 
                !fundingsCheckBox.isSelected()){
            HarvesterGui.htmlOutput.append("Please select at least one category for harvesting\n");
            resutlsLabel.setText("<HTML>"+HarvesterGui.htmlOutput.toString().replaceAll("\n", "<BR>") +"</HTML>");
        }else{
            Thread timerThread=new Thread(){
                        @Override
                        public void run(){
                            harvestButton.setEnabled(false);
                            workingLabel.setVisible(true);
                            while(true){
                                resutlsLabel.setText("<HTML>"+HarvesterGui.htmlOutput.toString().replaceAll("\n", "<BR>") +"</HTML>");
                            }
                        }
                    };
            timerThread.start();
            switch(dataSourceComboBox.getSelectedItem().toString()){
                case EktResources.EKT:
                    EktExporterGui ektExporterGui=new EktExporterGui();
                    Thread workerThread=new Thread(){
                        @Override
                        public void run(){
                            try{
                                ektExporterGui.startFromUI(projectsCheckBox.isSelected(), 
                                                        personsCheckBox.isSelected(), 
                                                        publicationsCheckBox.isSelected(), 
                                                        organizationsCheckBox.isSelected(), 
                                                        eAddressCheckBox.isSelected(), 
                                                        pAddressCheckBox.isSelected(), 
                                                        fundingsCheckBox.isSelected());
                                harvestButton.setEnabled(true);
                            }catch(GenericException ex){
                                logger.error("An unexpected error occurred",ex);
                            }
                        }
                    };
                    workerThread.start();
                    break;
                case RcukResources.RCUK:
                    RcukExporterGui rcukExporterGui=new RcukExporterGui();
                    new Thread(){
                        @Override
                        public void run(){
                            try{
                                rcukExporterGui.startFromUI(projectsCheckBox.isSelected(), 
                                                        personsCheckBox.isSelected(), 
                                                        publicationsCheckBox.isSelected(), 
                                                        organizationsCheckBox.isSelected());
                                harvestButton.setEnabled(true);
                            }catch(GenericException ex){
                                logger.error("An unexpected error occurred",ex);
                            }
                        }
                    }.start();
                    break;
                case FrisResources.FRIS:
                    FrisExporterGui frisExporterGui=new FrisExporterGui();
                    new Thread(){
                        @Override
                        public void run(){
                            try{
                                frisExporterGui.startFromUI(projectsCheckBox.isSelected(), 
                                                        personsCheckBox.isSelected(), 
                                                        publicationsCheckBox.isSelected(), 
                                                        organizationsCheckBox.isSelected());
                                harvestButton.setEnabled(true);
                            }catch(GenericException ex){
                                logger.error("An unexpected error occurred",ex);
                            }
                        }
                    }.start();
                    break;
                case "OTHER":
                default:
            } 
        }
    }//GEN-LAST:event_harvestButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HarvesterGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HarvesterGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HarvesterGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HarvesterGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HarvesterGui().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> dataSourceComboBox;
    private javax.swing.JLabel dataSourceLabel;
    private javax.swing.JCheckBox eAddressCheckBox;
    private javax.swing.JCheckBox fundingsCheckBox;
    private javax.swing.JButton harvestButton;
    private javax.swing.JLabel logoLabel;
    private javax.swing.JCheckBox organizationsCheckBox;
    private javax.swing.JCheckBox pAddressCheckBox;
    private javax.swing.JCheckBox personsCheckBox;
    private javax.swing.JCheckBox projectsCheckBox;
    private javax.swing.JCheckBox publicationsCheckBox;
    private javax.swing.JScrollPane resultsScrollPane;
    private javax.swing.JLabel resutlsLabel;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JLabel urlLabel;
    private javax.swing.JTextField urlTextField;
    private javax.swing.JLabel versionLabel;
    private javax.swing.JLabel workingLabel;
    // End of variables declaration//GEN-END:variables
}
